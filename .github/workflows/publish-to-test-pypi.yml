name: Publish Python 🐍 distributions 📦 to Test PyPI

on:
  push:
    branches:    
      - 'test/**'

jobs:
  testpypi:

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.9, '3.10', '3.11']
        include:
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
            label: linux-64
          - os: macos-latest
            cc: clang
            cxx: clang++
            label: osx-64
          - os: windows-latest
            cc: cl
            cxx: cl
            label: win-64
    

    name: ${{ matrix.label }}-Python-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}


    defaults:
      run:
        shell: bash -l {0}


    steps:
    - uses: actions/checkout@v2


    - name: Setup Homebrew
      if: runner.os == 'macOS'
      uses: Homebrew/actions/setup-homebrew@master


    - name: Install Homebrew Dependencies
      if: runner.os == 'macOS'
      run: |
        brew install libomp


    - name: Setup Conda Environment with Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-variant: Mambaforge
        miniconda-version: latest
        python-version: ${{ matrix.python-version }}
        use-mamba: true
        activate-environment: noiseflow


    - name: Set Conda Cache Date
      run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV


    - name: Cache Conda Env
      id: cached-conda-dependencies
      uses: actions/cache@v2
      env:
        # Increase this value to reset cache if etc/example-environment.yml has not changed
        CACHE_NUMBER: 0
      with:
        path: ${{ env.CONDA }}/envs
        key: conda-${{ runner.os }}-python${{ matrix.python-version }}-${{ env.DATE }}-${{ hashFiles('**/environment.yml') }}-${{ env.CACHE_NUMBER }}
      
          
    - name: Install Conda Dependencies
      if: steps.cached-conda-dependencies.outputs.cache-hit != 'true'
      run: |
        mamba env update -n noiseflow -f environment.yml


    - name: Setup Poetry in Conda Environment
      uses: snok/install-poetry@v1
      with:
        version: latest # 1.5.1
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true


    - name: Cache Poetry Env
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: poetry-${{ runner.os }}-python${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}


    - name: Install Poetry Dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction

    - name: Print Python and Conda Info
      run: |
        python -c "import sys; print(sys.executable)"
        conda info --envs
        conda list numpy
        conda list cmake
        which cmake

    - name: Confirm NumPy Installation
      run: |
        conda activate noiseflow
        python -c "import numpy; print(numpy.__version__)"
        which cmake
        conda list

    - name: Install Source-Code from Github
      run: |
        CC=${{ matrix.cc }} CXX=${{ matrix.cxx }} python build_extern.py -c github-actions


    - name: Build and Publish
      run: |
        if [[ "${{ matrix.os }}" == "macos-latest" && "${{ matrix.python-version }}" == "3.11" ]]; then
          CXX=${{ matrix.cxx }} NOISEFLOW_USE_CPP=1 poetry build
        else
          CXX=${{ matrix.cxx }} NOISEFLOW_USE_CPP=1 poetry build -f wheel
        fi
        poetry config repositories.test-pypi https://test.pypi.org/legacy/
        poetry publish --repository test-pypi --username __token__ --password ${{ secrets.TEST_PYPI_TOKEN }}
